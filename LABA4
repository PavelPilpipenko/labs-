#include "pch.h"
#include <iostream>
#include <vector>
#include <random>
#include <ctime>
using std::cin;
using std::cout;
using std::endl;
using std::vector;

struct tree_node {
 int data;
 vector <tree_node*> children;
 tree_node(int _data) {
  data = _data;
 }
};

struct tree {
 tree_node* root = nullptr;
};

struct bin_tree_node {
 int data;
 bin_tree_node* left = nullptr, *right = nullptr;
 bin_tree_node(int _data) {
  data = _data;
 }
};

struct bin_tree {
 bin_tree_node* root = nullptr;
};

struct bin_tree_threaded_node {
 int data;
 bin_tree_threaded_node* left = nullptr, *right = nullptr;
 bool left_thread = false, right_thread = false;
 bin_tree_threaded_node(int _data) {
  data = _data;
 }
};

struct bin_tree_threaded {
 bin_tree_threaded_node* root = nullptr;
};

double get_random_real(double min, double max) {
 static std::random_device rd;
 static std::seed_seq seed{ rd(), (unsigned)time(nullptr) };
 static std::mt19937 gen(seed);
 std::uniform_real_distribution<> dist(min, max);
 return dist(gen);
}

int get_random_int(int min, int max) {
 static std::random_device rd;
 static std::seed_seq seed{ rd(), (unsigned)time(nullptr) };
 static std::mt19937 gen(seed);
 std::uniform_int_distribution<> dist(min, max);
 return dist(gen);
}

void add_element(tree_node* &root, int data, double p) {
 if (!root) {
  root = new tree_node(data);
  return;
 }
 if (get_random_real(0.0, 1.0) >= p) {
  int n = root->children.size();
  if (n) {
   add_element(root->children[get_random_int(0, n - 1)], data, p);
   return;
  }
 }
 root->children.push_back(new tree_node(data));
}

void print_tree(tree_node* root, int depth = 0, bool is_root = true) {
 if (root) {
  cout << depth << ',' << root->data << '\n';
  for (auto child : root->children) {
   print_tree(child, depth + 1, false);
  }
 }
 else {
  if (is_root) cout << "Empty." << endl;
 }
}

void readd_branch(tree_node* &root, tree_node* parent, int value, double p) {
 for (auto child : parent->children) {
  readd_branch(root, child, value, p);
  if (child->data != value) add_element(root, child->data, p);
  delete child;
 }
}

void remove_branch_by_value(tree_node* root, int value, vector <tree_node*> &subtrees) {
 int n = root->children.size();
 for (int i = 0; i < n; i++) {
  if (root->children[i]->data == value) {
   subtrees.push_back(root->children[i]);
   root->children.erase(root->children.begin() + i);
   i--;
   n--;
  }
  else remove_branch_by_value(root->children[i], value, subtrees);
 }
}

void delete_element_and_readd_branch(tree_node* &root, int value, double p) {
 if (root) {
  if (root->data == value) {
   tree_node* temp = root;
   root = nullptr;
   readd_branch(root, temp, value, p);
   delete temp;
  }
  else {
   vector <tree_node*> subtrees;
   remove_branch_by_value(root, value, subtrees);
   for (auto subtree : subtrees) {
    readd_branch(root, subtree, value, p);
    delete subtree;
   }
  }
 }
}

void add_element(bin_tree_node* &root, int data) {
 if (root) {
  if (data >= root->data) {
   if (root->right) {
    add_element(root->right, data);
   }
   else {
    root->right = new bin_tree_node(data);
   }
  }
  else {
   if (root->left) {
    add_element(root->left, data);
   }
   else {
    root->left = new bin_tree_node(data);
   }
  }
 }
 else {
  root = new bin_tree_node(data);
 }
}

void print_tree_preorder(bin_tree_node* root, int depth = 0, bool is_root = true, bool is_left = true) {
 if (root) {
  cout << depth;
  if (!is_root) {
   if (is_left) cout << 'L';
   else cout << 'R';
  }
  cout << ',' << root->data << '\n';
  print_tree_preorder(root->left, depth + 1, false);
  print_tree_preorder(root->right, depth + 1, false, false);
 }
 else {
  if (is_root) cout << "Empty." << endl;
 }
}

void print_tree_inorder(bin_tree_node* root, int depth = 0, bool is_root = true) {
 if (root) {
  print_tree_inorder(root->left, depth + 1, false);
  cout << depth << ',' << root->data << '\n';
  print_tree_inorder(root->right, depth + 1, false);
 }
 else {
  if (is_root) cout << "Empty." << endl;
 }
}

bin_tree_threaded_node* threader(bin_tree_node* root,bin_tree_threaded_node* previous = nullptr, bin_tree_threaded_node* next = nullptr) {
 auto new_node = new bin_tree_threaded_node(root->data);
 if (root->left) {
  new_node->left = threader(root->left, previous, new_node);
 }
 else {
  new_node->left_thread = true;
  new_node->left = previous;
 }
 if (root->right) {
  new_node->right = threader(root->right, new_node, next);
 }
 else {
  new_node->right_thread = true;
  new_node->right = next;
 }
 return new_node;
}

bin_tree_threaded_node* build_threaded(bin_tree_node* root) {
 return (root ? threader(root) : nullptr);
}

void print_tree(bin_tree_threaded_node* root) {
 if (root) {
  bin_tree_threaded_node* temp;
  while (!root->left_thread) root = root->left;
  
  while (root) {
   cout << root->data << '\n';
   temp = root;
   root = root->right;
   if (!temp->right_thread) {
    while (!root->left_thread) root = root->left;
   }
  }
 }
 else cout << "Empty." << endl;
}

void mistake() {
 cin.clear();
 cin.ignore(10000, '\n');
 cout << "Please, enter numbers only." << endl;
}

void input_value(int &value, int min, int max) {
 while (true) {
  cout << "Value: ";
  if (!(cin >> value)) mistake();
  else if (value < min || value > max) {
   cout << "Please, enter mentioned numbers only." << endl;
  }
  else break;
 }
}

int polytree_dial_mode() {
 tree new_tree;
 int value, number;
 double p;

 while (true) {
  cout << "Enter:" << endl << "'0' to add node" << endl << "'1' to delete node" << endl << "'2' to print tree" << endl;
  cout << "'-1' to finish program" << endl;
  input_value(value, -1, 2);
  system("cls");

  switch (value) {
  case 0:
   while (true) {
    cout << "Enter a number to add: ";
    if (!(cin >> number)) mistake();
    else break;
   }
   while (true) {
    cout << "Enter a probability of adding child to some node (otherwise it'll be added to some child with same probability): ";
    if (!(cin >> p)) mistake();
    else if (p < 0 || p > 1) cout << "Wrong probability." << endl;
    else break;
   }
   add_element(new_tree.root, number, p);
   system("cls");
   break;
  case 1:
   while (true) {
    cout << "Enter a number to delete: ";
    if (!(cin >> number)) mistake();
    else break;
   }
   while (true) {
    cout << "Enter a probability of adding process: ";
    if (!(cin >> p)) mistake();
    else if (p < 0 || p > 1) cout << "Wrong probability." << endl;
    else break;
   }
   delete_element_and_readd_branch(new_tree.root, number, p);
   system("cls");
   break;
  case 2:
   print_tree(new_tree.root);
   cout << endl << endl;
   break;
  case -1:
   return 0;
  }
 }
}

int bin_tree_dial_mode() {
 bin_tree new_tree;
 int value, number;

 while (true) {
  cout << "Enter:" << endl << "'0' to add node" << endl << "'1' to print tree (preorder)" << endl;
  cout << "'2' to print tree (inorder)" << endl << "'-1' to finish program" << endl;
  input_value(value, -1, 2);
  system("cls");

  switch (value) {
  case 0:
   while (true) {
    cout << "Enter a number to add: ";
    if (!(cin >> number)) mistake();
    else break;
   }
   add_element(new_tree.root, number);
   system("cls");
   break;
  case 1:
   print_tree_preorder(new_tree.root);
   cout << endl << endl;
   break;
  case 2:
   print_tree_inorder(new_tree.root);
   cout << endl << endl;
   break;
  case -1:
   return 0;
  }
 }
}

int dialogue_mode() {
 int value;
 
 cout << "Enter  to work with :" << endl << "'0' - a tree with not limited number of children" << endl;
 cout << "'1' - a binary tree" << endl;
 input_value(value, 0, 1);
 system("cls");

 switch (value) {
 case 0:
  return polytree_dial_mode();
 case 1:
  return bin_tree_dial_mode();
 default:
  return 0;
 }
}

int demonstration_mode() {
 tree poly_tree;
 bin_tree binary_tree;
 const int N = 10;

 cout << "A tree with probability addition:" << endl;
 add_element(poly_tree.root, 0, 1);
 for (int i = 0; i < N; i++) {
  add_element(poly_tree.root, get_random_int(0, 100), get_random_real(0.0, 1.0));
 }
 print_tree(poly_tree.root);
 cout << endl;
 cout << endl << "'200' is added with p = 1 (it should appear at depth = 1):" << endl;
 add_element(poly_tree.root, 200, 1);
 print_tree(poly_tree.root);
 cout << endl;
 cout << endl << "'500' is added with p = 0 (it should appear somewhere at the bottom):" << endl;
 add_element(poly_tree.root, 500, 0);
 print_tree(poly_tree.root);
 cout << endl;

 cout << "Removing the node with value '0' (p = 0, each node should have 1 child):" << endl;
 delete_element_and_readd_branch(poly_tree.root, 0, 0);
 print_tree(poly_tree.root);
 cout << endl;

 cout << "A binary tree:" << endl;
 for (int i = 0; i < N; i++) {
  add_element(binary_tree.root, get_random_int(0, 100));
 }
 print_tree_preorder(binary_tree.root);
 cout << endl;
 cout << "Inorder:" << endl;
 print_tree_inorder(binary_tree.root);
 cout << endl;

 cout << "Building a threaded binary tree from the previous tree (inorder iterative print):" << endl;
 print_tree(build_threaded(binary_tree.root));

 return 0;
}

int main()
{
 int value;

 cout << "Enter:" << endl << "'0' for dialogue mode" << endl << "'1' for demonstration mode" << endl;
 input_value(value, 0, 1);
 system("cls");

 switch (value) {
 case 0:
  return dialogue_mode();
 case 1:
  return demonstration_mode();
 }
}
